generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  passhash    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  memberships Membership[]
  refreshTokens RefreshToken[]
}

model Organization {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  members   Membership[]
}

model Membership {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  org       Organization @relation(fields: [orgId], references: [id])
  orgId     String
  role      String
  createdAt DateTime @default(now())
}

model RefreshToken {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  tokenHash String
  createdAt DateTime @default(now())
  expiresAt DateTime
  revokedAt DateTime?
}

model EnrollmentToken {
  id           String   @id @default(cuid())
  orgId        String
  tokenHash    String   @unique
  createdById  String
  createdAt    DateTime @default(now())
  expiresAt    DateTime
  revokedAt    DateTime?
}

model ServerNode {
  id         String   @id @default(cuid())
  orgId      String
  name       String
  hostname   String
  status     String   @default("unknown")
  lastSeenAt DateTime?
  nodeKeyHash String?
  agentUrl    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  servers    GameServer[]
}

model GameServer {
  id         String   @id @default(cuid())
  orgId      String
  nodeId     String?
  node       ServerNode? @relation(fields: [nodeId], references: [id])
  gameId     String
  name       String
  status     String   @default("stopped")
  ports      Json?
  config     Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
